#!/usr/bin/env python
""" Given that it is in the correct state, this node checks whether a person is handing a beanbag 
	and executes gripping

Services: (TODO: these can be imported from our python subpackage for sensing/vision)
	search_for_beanbag() - searches for a beanbag in its field of view
		Returns: Bool

	inspect_beanbag_color() - once found, inspects beanbag for color
		Returns: String

Subscribers:
	sub_state - subscribes to /robot_state, particularly if robot_state == state1 ("handoff")
	sub_gripper_state - subscribes to /some_gripper_state_topic 
	sub_joint_states - subscribes to /some_joint_states_topic

Publishers:
	pub_gripper_cmd - publishes gripper commands to /some_gripper_cmd_topic
	pub_joint_cmd - publishes joint commands to /some_joint_cmd_topic
"""

import rospy
from std_msgs.msg import Duration, String

def BeanbagHandoff(object):
	def __init__(self):
		rospy.init_node("beanbag_handoff")
		
		self.sub_state = rospy.Subscriber("/robot_state", String, self.robot_state_callback)
		self.sub_gripper_state = rospy.Subscriber("/some_gripper_state_topic", SomeType, self.gripper_state_callback)
		self.sub_joint_states = rospy.Subscriber("/some_joint_states_topic", SomeType, self.joint_states_callback)

		self.pub_gripper_cmd = rospy.Publisher("/some_gripper_cmd_topic", SomeType, queue_size=10)
		self.pub_joint_cmd = rospy.Publisher("/some_joint_cmd_topic", SomeType, queue_size=10)

	def robot_state_callback(self, event):
		"""
		check if current robot_state == state1 ("handoff"), 
		if so: search_for_beanbag() and inspect_beanbag_color()
		"""
		return None

	def gripper_state_callback(self, event):
		"""
		check various conditions to see if it has successfully grasped the bag
		"""
		return None

	def joint_states_callback(self, event):
		"""
		To take action when bag present
		"""
		return None


def search_for_beanbag():
	"""
	Search for beanbag in field of view
	Returns: Bool, if found or not
	(To be moved to subpackages)
	"""
	return True

def inspect_beanbag_color():
	"""
	Inspect beanbag for color
	Returns: String, color of beanbag
	(To be moved to subpackages)
	"""
	return None


def main():
    rh = BeanbagHandoff()
    rospy.spin()

if __name__  == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass