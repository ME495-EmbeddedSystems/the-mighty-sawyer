#!/usr/bin/env python

import rospy
from apriltag_ros.msg import AprilTagDetectionArray
from the_mighty_sawyer.srv import TagPose
import numpy as np
from std_srvs.srv import Empty, EmptyResponse, TriggerResponse, Trigger, TriggerRequest
from geometry_msgs.msg import Pose

class Tag_Pose(object):
    def __init__(self):
        self.sub = rospy.Subscriber('tag_detections', AprilTagDetectionArray, self.sub_callback)
        rospy.Service('locate_board', TagPose, self.locate_board_callback)
        rospy.Service('locate_recent_bag',TagPose,self.locate_recent_bag_callback)
        self.bag_id = 0
        self.array = np.zeros((9))

        self.is_home = False
        self.home_count = 0
        self.home_count_thresh = 3
        self.board_position = None
        self.board_present = False
        self.tag_vals = None
        self.team = None

        self.bags_found = []
        self.bag_poses = {}

        self.red_bags_found = []
        self.blue_bags_found = []
        self.bags_thrown = 0
        self.red_bags = {}
        self.blue_bags = {}
        self.team_call = rospy.ServiceProxy('get_team', Trigger)

    def locate_board_callback(self, data):
        """

        """
        self.home_count = 0
        self.is_home = True
        while self.home_count < self.home_count_thresh or not self.board_position:
            try:
                for d in self.tag_vals.detections:
                    if d.id == (0,):
                        self.board_position = self.tag_vals.detections[0].pose.pose.pose
                        self.board_present = True
            except:
                pass

        self.is_home = False

        return self.board_position


        # try:
        #     if self.tag_vals.detections[0].id == (0,):
        #
        #         self.pos_x0 = self.tag_vals.detections[0].pose.pose.pose.position.x
        #         self.pos_y0 = self.tag_vals.detections[0].pose.pose.pose.position.y
        #         self.pos_z0 = self.tag_vals.detections[0].pose.pose.pose.position.z
        #         self.tag_id0 = self.tag_vals.detections[0].id
        #         self.board_position = self.tag_vals.detections[0].pose.pose.pose
        #         # printing first tags pose
        #         print "tag: ",
        #         print self.tag_id0
        #         print 'x position: ',
        #         print self.pos_x0,
        #         print "   y position: ",
        #         print self.pos_y0,
        #         print "   z position: ",
        #         print self.pos_z0
        #         return self.board_position
        #     elif self.tag_vals.detections[0].id != (0,):
        #         return self.board_position
        #
        # except IndexError:
        #     # printing first tags pose
        #     print "tag: ",
        #     print self.tag_id0
        #     print 'x position: ',
        #     print self.pos_x0,
        #     print "   y position: ",
        #     print self.pos_y0,
        #     print "   z position: ",
        #     print self.pos_z0
        #     return self.board_position
        
    def locate_recent_bag_callback(self, data):
        """
        returns pose of last bag thrown from sawyer's team
        reaturns pose 0 0 0, 0 0 0 0 if no new bag found (presumably because it's in the hole)
        """
        if not self.team or self.team == 'None':
            resp = self.team_call.call(TriggerRequest())
            self.team = resp.message
        self.home_count = 0
        self.is_home = True
        new_bags = []
        while self.home_count < self.home_count_thresh:
            try:
                for d in self.tag_vals.detections:
                    id_ = d.id[0]
                    if id_ != 0:
                        if id_ not in self.bags_found and id_ not in new_bags:
                            new_bags.append(id_)
            except:
                pass

        self.bags_found.extend(new_bags)
        new_bag = None

        for id_ in new_bags:
            if self.team == 'blue':
                if not id_ % 2:
                    new_bag = id_
            else:
                if id_ % 2:
                    new_bag = id_

        if new_bag:
            ret = self.bag_poses[new_bag]
        else:
            ret = Pose()

        self.is_home = False

        return ret







        # try:
        #     for x in range(9):
        #         print x
        #         self.bag_id = self.tag_vals.detections[x].id
        #         if self.bag_id != (0,):
        #             self.bag = self.tag_vals.detections[x].pose.pose.pose
        #     print self.bag_id
        #     return self.bag
        # except IndexError:
        #     if self.bag_id != (0,):
        #         self.bag = self.tag_vals.detections[x-1].pose.pose.pose
        #         print self.bag_id
        #         print x
        #         return self.bag
        #     else:
        #         print x
        #         return []

    def sub_callback(self, data):
        if self.is_home:
            self.home_count += 1
            self.tag_vals = data
            try:
                for d in self.tag_vals.detections:
                    id_ = d.id[0]
                    if id_ == 0:
                        self.board_position = d.pose.pose.pose
                        self.board_present = True
                    else:
                        self.bag_poses[id_] = d.pose.pose.pose
            except:
                pass



def main():
    rospy.init_node('apriltag_pose')
    tag_pose = Tag_Pose()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
