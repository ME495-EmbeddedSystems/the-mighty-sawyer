#!/usr/bin/env python

"""
Main interface between The Mighty Sawyer (TMS) and AprilTags.
Also interfaces with TMS's screen and performs the scorekeeping for a cornhole game.

SERVICES:
    /locate_board (Pose) sends the most recent pose of the board april tag
    /locate_recent_bag (Pose) sends the pose of the most recent bag that Sawyer threw
    /clear_board resets the game state. This should be called after Sawyer throws 4 bags.
"""

import rospy
from the_mighty_sawyer import set_exposure, switch_camera, put_text, display_png, get_dist
from apriltag_ros.msg import AprilTagDetectionArray
from the_mighty_sawyer.srv import TagPose
import numpy as np
from std_srvs.srv import Empty, EmptyResponse, TriggerResponse, Trigger, TriggerRequest
from geometry_msgs.msg import Pose
import math

def get_dist(pose1, pose2):
    """
    Calculates the Euclidean distance between two poses.
    """
    return math.sqrt((pose1.position.x - pose2.position.x)**2 + (pose1.position.y - pose2.position.y)**2 + (pose1.position.z - pose2.position.z)**2)

class Tag_Pose(object):
    """
    Main class that interfaces with AprilTags
    """
    def __init__(self):
        switch_camera('head')
        self.sub = rospy.Subscriber('tag_detections', AprilTagDetectionArray, self.sub_callback)
        rospy.Service('locate_board', TagPose, self.locate_board_callback)
        rospy.Service('locate_recent_bag',TagPose,self.locate_recent_bag_callback)
        rospy.Service('clear_board', Empty, self.clear_board_callback)
        self.bag_id = 0
        self.array = np.zeros((9))

        self.is_home = False
        self.home_count = 0
        self.home_count_thresh = 5
        self.board_position = None
        self.board_present = False
        self.tag_vals = None
        self.team = None
        self.on_board_thresh = .5

        self.bags_found = []
        self.bag_poses = {}
        self.red_score = []
        self.blue_score = []

        self.current_round_red_score = 0
        self.current_round_blue_score = 0

        self.red_score_total = 0
        self.blue_score_total = 0

        self.color = (0,0,0)

        self.red_bags_found = []
        self.blue_bags_found = []
        self.bags_thrown = 0
        self.red_bags = {}
        self.blue_bags = {}
        self.team_call = rospy.ServiceProxy('get_team', Trigger)

        set_exposure('head', 22)

    def clear_board_callback(self, data):
        """
        Callback for /clear_board Service
        - Scorekeeping
        - Posting emoji images on Sawyer's screen
        """
        if self.team == 'blue':
            self.color = (255,0,0)
        elif self.team == 'red':
            self.color = (0,0,255)

        if self.current_round_red_score < 0:
            self.current_round_red_score = 0
        if self.current_round_blue_score < 0:
            self.current_round_blue_score = 0

        self.red_score_total += self.current_round_red_score
        self.blue_score_total += self.current_round_blue_score

        self.bags_found = []
        self.bag_poses = {}
        self.red_score = []
        self.blue_score = []
        self.current_round_red_score = 0
        self.current_round_blue_score = 0

        put_text('New Score:')
        rospy.sleep(1)
        put_text('B  ' + str(self.blue_score_total) + ' - ' + str(self.red_score_total) + '  R')

        if self.blue_score_total == 21:
            put_text('Blue Wins!', (255,0,0))
            rospy.sleep(2.5)
            if self.team == 'blue':
                display_png('happy.png', self.color)
            elif self.team == 'red':
                display_png('sad.png', self.color)
            rospy.sleep(2)
        elif self.red_score_total == 21:
            put_text('Red Wins!', (0,0,255))
            rospy.sleep(2.5)
            if self.team == 'blue':
                display_png('sad.png', self.color)
            elif self.team == 'red':
                display_png('happy.png', self.color)
            rospy.sleep(2)

        if self.blue_score_total > 21:
            self.blue_score_total = 15
            put_text('Blue Busts!', (255, 0, 0))
            rospy.sleep(2.5)
            if self.team == 'blue':
                display_png('sad.png', self.color)
            elif self.team == 'red':
                display_png('happy.png', self.color)
            rospy.sleep(2)

        if self.red_score_total > 21:
            self.red_score_total = 15
            put_text('Red Busts!', (0, 0, 255))
            rospy.sleep(2.5)
            if self.team == 'red':
                display_png('sad.png', self.color)
            elif self.team == 'blue':
                display_png('happy.png', self.color)
            rospy.sleep(2)

        return EmptyResponse()

    def locate_board_callback(self, data):
        """
        Callback for /locate_board Service.
        """
        self.home_count = 0
        self.is_home = True
        while self.home_count < self.home_count_thresh or not self.board_position:
            try:
                for d in self.tag_vals.detections:
                    if d.id == (0,):
                        self.board_position = self.tag_vals.detections[0].pose.pose.pose
                        self.board_present = True
            except:
                pass

        self.is_home = False

        return self.board_position


    def locate_recent_bag_callback(self, data):
        """
        Callback for /locate_recent_bag Service.
        Returns pose of last bag thrown from sawyer's team
        Returns pose 0 0 0, 0 0 0 0 if no new bag found (presumably because it's in the hole)
        """
        raw_input('Press enter when turn complete.')
        if not self.team or self.team == 'None':
            resp = self.team_call.call(TriggerRequest())
            self.team = resp.message
        self.home_count = 0
        self.is_home = True
        new_bags = []
        while self.home_count < self.home_count_thresh:
            try:
                for d in self.tag_vals.detections:
                    id_ = d.id[0]
                    if id_ != 0:
                        if id_ not in self.bags_found and id_ not in new_bags:
                            new_bags.append(id_)
            except:
                pass

        self.bags_found.extend(new_bags)
        new_bag = None

        blue_present = False
        red_present = False
        for id_ in new_bags:
            dist = get_dist(self.board_position, self.bag_poses[id_])
            rospy.loginfo(dist)
            rospy.loginfo(id_)
            if dist < self.on_board_thresh:
                score = 1
            else:
                score = 0

            if not id_ % 2:
                blue_present = True
                self.blue_score.append(score)
                if self.team == 'blue':
                    new_bag = id_
            else:
                red_present = True
                self.red_score.append(score)
                if self.team == 'red':
                    new_bag = id_

        if not blue_present:
            self.blue_score.append(3)
        if not red_present:
            self.red_score.append(3)

        self.current_round_red_score = sum(self.red_score) - sum(self.blue_score)
        self.current_round_blue_score = sum(self.blue_score) - sum(self.red_score)
        put_text('Current Round:')
        rospy.sleep(1)

        red_disp = self.current_round_red_score
        if red_disp < 0:
            red_disp =0
        blue_disp = self.current_round_blue_score
        if blue_disp < 0:
            blue_disp = 0

        put_text('B  ' + str(blue_disp) + ' - ' + str(red_disp) + '  R')

        rospy.loginfo(new_bags)
        rospy.loginfo(self.bags_found)
        rospy.loginfo(self.current_round_red_score)
        rospy.loginfo(self.current_round_blue_score)
        rospy.loginfo(self.red_score)
        rospy.loginfo(self.blue_score)

        rospy.sleep(2)

        if new_bag:
            ret = self.bag_poses[new_bag]
        else:
            ret = Pose()

        self.is_home = False

        return ret

    def sub_callback(self, data):
        """
        Callback for /tag_detections Subscriber topic from AprilTagDetection

        Retrives data published by apriltags node
        """
        if self.is_home:
            self.home_count += 1
            self.tag_vals = data
            try:
                for d in self.tag_vals.detections:
                    id_ = d.id[0]
                    if id_ == 0:
                        self.board_position = d.pose.pose.pose
                        self.board_present = True
                    else:
                        self.bag_poses[id_] = d.pose.pose.pose
            except:
                pass


def main():
    rospy.init_node('apriltag_pose')
    tag_pose = Tag_Pose()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
