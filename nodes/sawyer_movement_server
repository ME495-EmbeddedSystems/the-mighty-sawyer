#!/usr/bin/env python

"""
This file offers services to interact with the custom library to move
sawyer to different states for the grabbing and throwing sequence
"""

# TODO: get default parameters from yaml file.

from __future__ import division
import numpy as np
import rospy

from the_mighty_sawyer import MoveArm

from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse
from geometry_msgs.msg import Pose

class ServClient(object):

    def __init__(self):

        self.sawyer = MoveArm()

        rospy.Service('start_up', Empty, self.start_up_callback)
        rospy.Service('go_to_home_pos', Empty, self.home_pos_callback)
        rospy.Service('overhand_throw', Empty, self.overhand_callback)
        rospy.Service('actuate_gripper', SetBool, self.actuate_gripper_callback)
        rospy.Service('make_adjustments', Empty, self.make_adjustments_callback)

    def start_up_callback(self, _ignore):
        """
        Callback for the start up service.
            1) Enables the robot.
            2) Calibrates the gripper

        This should be called first before trying to interact with the robot
        """
        self.sawyer.initializaton()

        return EmptyResponse()

    def home_pos_callback(self, _ignore):
        """
        Callback for the home position service

        Send the robot to the preconfigured home position.
        """
        self.sawyer.go_to_home_pos()

        return EmptyResponse()

    def overhand_callback(self, _ignore):
        """
        Callback for the overhand throw service
            1) positions the arm in a ready position
            2) Executes the throwing motion
        """
        self.sawyer.do_over_hand_toss()

        return EmptyResponse()

    def make_adjustments_callback(self, _ignore):
        """
        Callback for the make adjustments service
        """

        board_pose = Pose()

        board_pose.position.x = 16
        board_pose.position.y = 7*12

        rospy.loginfo(board_pose)

        bag_pose = Pose()

        self.sawyer.overhand_throw_speed = 1
        self.sawyer.overhand_target_angle = -2.75

        return EmptyResponse()

    def actuate_gripper_callback(self, data):
        """
        Callback for the gripper service

        INPUTS:
            data (SetBool): 1 to open grippers, 0 to close grippers
        """
        self.sawyer.actuate_gripper(data)

        return SetBoolResponse(success=True,message="")


def main():

    rospy.init_node('sawyer_movement_server')

    ServClient()

    rospy.loginfo("Movement Server Ready!")

    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
