#!/usr/bin/env python

"""
This file offers services to interact with the custom library to move
sawyer to different states for the grabbing and throwing sequence

SERVICES:
    /start_up: enable the robot and calibrate the grippers
    /go_to_home_pos: send the robot to a preset home position
    /overhand_throw: executes an overhand
    /actuate_gripper: actuates gripper to open/close positions
    /target_board: targets the board
    /make_adjustments: makes targeting/throwing adjustments

PROXIES:
    /locate_board: This services returns the pose of the cornhole board
    /locate_recent_bag: This service returns the pose of the most recent bag thrown by Sawyer
    /get_team: Returns the color of the team sawyer is playing on
"""

from __future__ import division
import numpy as np
import rospy

from the_mighty_sawyer import MoveArm
from the_mighty_sawyer import display_png, put_text

from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse, Trigger, TriggerRequest, TriggerResponse
from the_mighty_sawyer.srv import TagPose, TagPoseResponse
from geometry_msgs.msg import Pose


class ServClient(object):
    """
    A class with a suite of movement-related Services.
    """
    def __init__(self):

        self.sawyer = MoveArm()

        rospy.Service('start_up', Empty, self.start_up_callback)
        rospy.Service('go_to_home_pos', Empty, self.home_pos_callback)
        rospy.Service('overhand_throw', Empty, self.overhand_callback)
        rospy.Service('actuate_gripper', SetBool, self.actuate_gripper_callback)
        rospy.Service('target_board', Empty, self.target_board_callback)
        rospy.Service('make_adjustments', Empty, self.make_adjustments_callback)

        rospy.wait_for_service('locate_board')
        self.get_board_pose = rospy.ServiceProxy('locate_board', TagPose)

        rospy.wait_for_service('locate_recent_bag')
        self.get_bag_pose = rospy.ServiceProxy('locate_recent_bag', TagPose)

        rospy.wait_for_service('get_team')
        self.get_team = rospy.ServiceProxy('get_team', Trigger)

        self.sawyer.target_pose = TagPoseResponse()

        self.team = None
        self.color = (0,0,0)

        self.init_run = True

        self.board = None
        self.bag = None

    def start_up_callback(self, _ignore):
        """
        Callback for the start up service.
            1) Enables the robot.
            2) Calibrates the gripper

        This should be called first before trying to interact with the robot
        """

        put_text(' ', bg_color=(0, 0, 0))
        self.sawyer.initializaton()

        return EmptyResponse()

    def home_pos_callback(self, _ignore):
        """
        Callback for the home position service

        Send the robot to the preconfigured home position.
        """
        self.sawyer.go_to_home_pos()

        return EmptyResponse()

    def overhand_callback(self, _ignore):
        """
        Callback for the overhand throw service
            1) positions the arm in a ready position
            2) Executes the throwing motion
        """

        if not self.team or self.team == 'None':
            resp = self.get_team.call(TriggerRequest())
            self.team = resp.message

            if self.team == 'blue':
                self.color = (255,0,0)
            elif self.team == 'red':
                self.color = (0,0,255)

        self.sawyer.do_over_hand_toss()

        return EmptyResponse()

    def make_adjustments_callback(self, _ignore):
        """
        Gets the board pose and the most recent bag pose and decides whether or
        not to make modifications to the throwing settings
        """

        # Get board and bag pose
        self.board = self.get_board_pose()
        self.bag = self.get_bag_pose()

        distance_change = ((self.sawyer.target_pose.pose.position.z - self.board.pose.position.z)**2 + (self.sawyer.target_pose.pose.position.x - self.board.pose.position.x)**2)**.5

        rospy.loginfo("Distance Between Target and Board %s", distance_change)

        if self.init_run == True:
            put_text("Ready to play?", (255,255,255))
        else:
            put_text("How'd I do?", self.color)

        rospy.sleep(1)

        board_update = False

        # If the board pose has changed then update
        if abs(distance_change) > 0.5:
            rospy.loginfo("Board Change Detected -- Updating Target...")
            self.target_board_callback(Empty)
            board_update = True

            if self.init_run == False:
                display_png('angry.png', self.color)

        if self.init_run == False and board_update == False:
            if self.bag.pose.position.x == 0 and self.bag.pose.position.y == 0:
                display_png('happy.png', self.color)
            else:
                self.update_throw()

        self.init_run = False

        return EmptyResponse()

    def target_board_callback(self, _ignore):
        """
        Function to target the board. This will update the defualt parameters so
        sawyer will target the location of board relative to its default throwing
        location

        z from april tag is x and x from april tag is y
        """

        # Reset parameters to their default values
        self.sawyer.reset_default_settings()

        # Set first targeting angle
        default_board_pose = Pose()

        # Location of throw without modifying any parameters
        default_board_pose.position.x = 0.6134
        default_board_pose.position.y = 0.1829
        default_board_pose.position.z = 3.04

        # Store the current board pose here
        self.sawyer.target_pose = self.board

        # Calculate the headings of each point relative to the base
        default_heading = np.arctan2(default_board_pose.position.x, default_board_pose.position.z)
        target_heading = np.arctan2(self.sawyer.target_pose.pose.position.x, self.sawyer.target_pose.pose.position.z)

        # Calculate the change in heading
        dtheta_target = default_heading - target_heading

        # Caculate the distance to each point relative to the base
        default_range = ((default_board_pose.position.z)**2 + (default_board_pose.position.x)**2)**.5
        target_range = ((self.sawyer.target_pose.pose.position.z)**2 + (self.sawyer.target_pose.pose.position.x)**2)**.5

        # Calulate the percent change in the distance
        drange_target = (default_range - target_range) / (default_range)

        # Set the angle to throw
        self.sawyer.overhand_target_angle += dtheta_target

        # Set the speed to throw
        self.sawyer.overhand_throw_speed = 1 * (1 - drange_target)

        # Print out updated Parameters
        self.print_params()

    def update_throw(self):
        """
        Function to make adjustments based on sawyers most recent throw.

        Check for overshoot and undershoot by evalauating if the distance between
        the bag and the target is greater than 1ft. and the bag is in quadrent
        2 or 4.

        Check for poor aim by evalauating if the distance between the bag and
        the target is greater than 6in. and the bag is in quadrent 1 or 3, then
        change the targeting angle.
        """

        data = self.bag

        # Used for Testing
        # data.pose.position.x = 1.143
        # data.pose.position.y = 1.8288

        # Get Range and heading from target to the bag
        x_diff_throw = data.pose.position.z - self.sawyer.target_pose.pose.position.z
        y_diff_throw = data.pose.position.x - self.sawyer.target_pose.pose.position.x

        distance_from_target = ((x_diff_throw)**2 + (y_diff_throw)**2)**.5
        angle_from_target = np.arctan2(y_diff_throw, x_diff_throw)

        rospy.loginfo("Bag distance from Board Location: %s", distance_from_target)
        rospy.loginfo("Bag heading from Board Location: %s", angle_from_target)

        needs_adjusting = 0

        # Check for overshoot and undershoot
        # If the distance is greater than 1ft. and the bag is in quadrent 2 or 4
        # Then change the velocity respectively.
        if distance_from_target > 0.6:
            if angle_from_target > -np.pi/2 and angle_from_target < 0:
                needs_adjusting = 1
                self.sawyer.overhand_throw_speed -= .1

                display_png('sad.png', self.color)

                # Check for a minimum speed setting
                if self.sawyer.overhand_throw_speed < .6:
                    self.sawyer.overhand_throw_speed = .6
                    rospy.loginfo("Overshoot Detected -- At Min Speed")
                else:
                    rospy.loginfo("Overshoot Detected -- Decreasing throwing speed")


            elif angle_from_target < np.pi and angle_from_target > np.pi/2:
                needs_adjusting = 1
                self.sawyer.overhand_throw_speed += .1

                display_png('sad.png', self.color)

                # Check for a maximum speed setting
                if self.sawyer.overhand_throw_speed > 1:
                    self.sawyer.overhand_throw_speed = 1
                    rospy.loginfo("Undershoot Detected -- At Max Speed")
                else:
                    rospy.loginfo("Undershoot Detected -- Increasing throwing speed")

        # Check for poor aim
        # If the distance from the target is greater than 6in. and the bag is in
        # quadrent 1 or 3,
        # Then change the targeting angle
        if distance_from_target > 0.6:
            if (angle_from_target > -np.pi and angle_from_target < -np.pi/2) or (angle_from_target > 0 and angle_from_target < np.pi/2):
                needs_adjusting = 1
                rospy.loginfo("Heading too far off -- Updating Throwing Angle")

                target_heading = np.arctan2(self.sawyer.target_pose.pose.position.x, self.sawyer.target_pose.pose.position.z)
                bag_heading = np.arctan2(data.pose.position.x, data.pose.position.z)

                dtheta_adjust =  bag_heading - target_heading

                self.sawyer.overhand_target_angle += dtheta_adjust
                display_png('sad.png', self.color)

        if needs_adjusting == 0:
            display_png('happy.png', self.color)

        self.print_params()

    def actuate_gripper_callback(self, data):
        """
        Callback for the gripper service

        INPUTS:
            data (SetBool): 1 to open grippers, 0 to close grippers
        """
        self.sawyer.actuate_gripper(data)

        return SetBoolResponse(success=True,message="")

    def print_params(self):
        """
        Print throwing parameters
        """
        rospy.loginfo("====================  ADJUSTMENTS ====================")
        rospy.loginfo("Targeting Angle: %s", self.sawyer.overhand_target_angle)
        rospy.loginfo("Throwing Speed: %s", self.sawyer.overhand_throw_speed)
        rospy.loginfo("Release Angle: %s", self.sawyer.overhand_release_angle)
        rospy.loginfo("======================================================")


def main():

    rospy.init_node('sawyer_movement_server')

    ServClient()

    rospy.loginfo("Movement Server Ready!")

    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
