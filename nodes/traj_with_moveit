#!/usr/bin/env python

"""
This node moves the sawyer arm from the area to recieve the bean bag to the
start of the throwing trajectory

PUBLISHES To:

SUBSCIBED To:

CLIENTS:

"""

from __future__ import division
import sys
import numpy as np
import rospy
import moveit_commander

import intera_interface

import geometry_msgs.msg
import moveit_msgs.msg
from std_msgs.msg import String

from moveit_commander.conversions import pose_to_list

class MoveArm(object):

    def __init__(self):

        # Import Script to Enable/Disable
        # rs = intera_interface.RobotEnable()

        self.gripper = intera_interface.Gripper('right_gripper')

        self.InitializeGripper()

        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('traj_with_moveit', anonymous=True)

        self.robot = moveit_commander.RobotCommander()

        self.scene = moveit_commander.PlanningSceneInterface()

        group_name = "right_arm"
        self.move_group = moveit_commander.MoveGroupCommander(group_name)

        self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                                            moveit_msgs.msg.DisplayTrajectory,
                                                            queue_size=20)

        # We can get the name of the reference frame for this robot:
        self.planning_frame = self.move_group.get_planning_frame()
        print "============ Planning frame: %s" % self.planning_frame

        # We can also print the name of the end-effector link for this group:
        self.eef_link = self.move_group.get_end_effector_link()
        print "============ End effector link: %s" % self.eef_link

        # We can get a list of all the groups in the robot:
        self.group_names = self.robot.get_group_names()
        print "============ Available Planning Groups:", self.group_names

        # Sometimes for debugging it is useful to print the entire state of the
        # robot:
        print "============ Printing robot state"
        print self.robot.get_current_state()
        print "==================================="

    def InitializeGripper(self):
        self.gripper.reboot()
        self.gripper.calibrate()

    def OpenGripper(self):
        self.gripper.open()

    def CloseGripper(self):
        self.gripper.close()

    def go_to_recieving_pos(self):

        joint_goal = self.move_group.get_current_joint_values()

        joint_goal[0] = 0
        joint_goal[1] = -.5
        joint_goal[2] = 0
        joint_goal[3] = 2.5
        joint_goal[4] = 0
        joint_goal[5] = -2


        self.move_group.go(joint_goal, wait=True)

        self.move_group.stop()

    def print_joint_states(self):
        print "Joint Values ==========================="
        print self.move_group.get_current_joint_values()

    def print_pose(self):
        print "Pose Values ============================"
        print self.move_group.get_current_pose()

    def calc_throw_start_pos(self):
        pass

    def go_to_throwing_start_pose(self):
        pose_goal = geometry_msgs.msg.Pose()

        pose_goal.position.x = -.5
        pose_goal.position.y = -.5
        pose_goal.position.z = .5

        pose_goal.orientation.x = 0
        pose_goal.orientation.y = 0
        pose_goal.orientation.z = 0
        pose_goal.orientation.w = 1

        self.move_group.set_pose_target(pose_goal)

        self.move_group.go(wait=True)

        self.move_group.stop()

        self.move_group.clear_pose_targets()

    def throw(self):

        pose_goal = geometry_msgs.msg.Pose()

        pose_goal.position.x = .5
        pose_goal.position.y = -.5
        pose_goal.position.z = .5

        pose_goal.orientation.x = 0
        pose_goal.orientation.y = 0
        pose_goal.orientation.z = 0
        pose_goal.orientation.w = 1

        self.move_group.set_pose_target(pose_goal)

        self.move_group.go(wait=True)

        self.move_group.stop()

        self.move_group.clear_pose_targets()

def main():

    testing = MoveArm()

    testing.go_to_recieving_pos()

    testing.CloseGripper()

    # testing.go_to_throwing_start()

    # testing.print_pose()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
