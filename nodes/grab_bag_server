#!/usr/bin/env python
"""
TODO import srv correctly
TODO add srv to cmake
TODO way to set team
TODO inspect oject data
"""
import rospy
import os
from the_mighty_sawyer.imagelib import switch_camera, put_text
from the_mighty_sawyer.srv import GrabBag,
from std_msgs.msg import Bool, Float32MultiArray, Int8
import intera_io
import intera_interface
from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse

class GrabBagServer(object):
    """
    """

    def __init__(self):
        self.init = False
        self.bag_present = False
        self.present_count = 0
        self.blue_count = 0
        self.red_count = 0
        self.team = 'red'
        self.present_thresh = 5
        self.sub_find_object = rospy.Subscriber('objects', Float32MultiArray, self.find_object_callback)
        self.grab_bag = rospy.Service('grab_bag', GrabBag, self.grab_bag_callback)
        self.io = intera_io.IODeviceInterface('internal_camera', 'right_hand_camera')
        self.disp = intera_interface.HeadDisplay()

        self.gripper = rospy.ServiceProxy('actuate_gripper', SetBool)

        # sloppy way to get paths to display images
        self.img_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.img_dir = os.path.join(self.img_dir, 'images', 'display')

        self.io.set_signal_value('set_exposure', 20.0)


        switch_camera('arm')

    def grab_bag_callback(self, srv_data):
        """

        :param data:
        :return:
        """
        self.gripper(0)
        switch_camera('arm')
        self.disp.display_image(os.path.join(self.img_dir, 'blank_screen.png'))

        bag_present = False
        if not self.init:
            while self.blue_count < self.present_thresh and self.red_count < self.present_thresh:
                pass

            if self.blue_count >= self.present_thresh:
                # turn display blue
                self.disp.display_image(os.path.join(self.img_dir, 'blue_screen.png'))
                self.team = 'blue'
                put_text('Go Blue!', (255, 0, 0))

            else:
                self.disp.display_image(os.path.join(self.img_dir, 'red_screen.png'))
                self.team = 'red'
                put_text('Red Team!', (0, 0, 255))
            self.init = True
            bag_present = True

        while not bag_present:
            while self.blue_count < self.present_thresh and self.red_count < self.present_thresh:
                pass
            if self.blue_count >= self.present_thresh:
                # turn display blue
                self.disp.display_image(os.path.join(self.img_dir, 'blue_screen.png'))
                rospy.sleep(1)
                if self.team == 'blue':
                    put_text('Ready for my bag!', (255, 0, 0))
                    bag_present = True
                else:
                    put_text('Wrong team!', (255, 0, 0), (0,0,255))

            else:
                self.disp.display_image(os.path.join(self.img_dir, 'red_screen.png'))
                rospy.sleep(1)
                if self.team == 'red':
                    put_text('Ready for my bag!', (0, 0, 255))
                    bag_present = True
                else:
                    put_text('Wrong team!', (0, 0, 255), (255, 0, 0))
        # print('in callback')



        # while self.blue_count < self.present_thresh and self.red_count < self.present_thresh:
        #     pass
        #
        # if self.blue_count >= self.present_thresh:
        #     # turn display blue
        #     self.disp.display_image(os.path.join(self.img_dir, 'blue_screen.png'))
        # else:
        #     self.disp.display_image(os.path.join(self.img_dir, 'red_screen.png'))
        self.gripper(1)
        switch_camera('head')
        #
        # ret = GrabBag
        # ret.val = 1





        ret = Int8(1)
        return ret

    def find_object_callback(self, data):
        """

        :param data:
        :return:
        """

        # print(len(data))
        # print('layout\t', data.layout)
        # print('data\t', data.data)

        if data.data:
            obj = data.data[0]
        else:
            obj = 0
            # print('obj\t', data.data[0])


        # print(data.data[0])

        # obj = data[0][0] # TODO inspect to make sure this is correct
        #
        if obj:
            if obj < 5:
                self.red_count += 1
            else:
                self.blue_count += 1
        else:
            self.red_count = 0
            self.blue_count = 0


def main():
    """ The main() function. """
    rospy.init_node('grab_bag_server')
    myGrabBagServer = GrabBagServer()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass


