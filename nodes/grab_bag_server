#!/usr/bin/env python
"""
Node that provides service to acquire bean bag from human player.

PUBLISHES:
None

SUBSCRIBES:
/objects-  receives information on presence of beanbags

SERVICES:
grab_bag- Empty/Empty, initiate process to grab beanbag from player
"""
import rospy
import os
from the_mighty_sawyer import switch_camera, put_text
from the_mighty_sawyer.srv import GrabBag
from std_msgs.msg import Bool, Float32MultiArray, Int8
import intera_io
import intera_interface
from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse, Trigger, TriggerResponse


class GrabBagServer(object):
    """
    Object to provide grab bag service
    """

    def __init__(self):
        # Variables
        self.init = False
        self.bag_present = False
        self.blue_count = 0
        self.red_count = 0
        self.team = None
        self.present_thresh = 5
        self.bg_color = (255,255,255)

        # ROS publishers/subscribers/services
        rospy.Service('grab_bag', Empty, self.grab_bag_callback)
        rospy.Service('get_team', Trigger, self.get_team_callback)
        self.sub_find_object = rospy.Subscriber('objects', Float32MultiArray, self.find_object_callback)
        self.gripper_srv = rospy.ServiceProxy('actuate_gripper', SetBool)

        # intera objects
        self.io = intera_io.IODeviceInterface('internal_camera', 'right_hand_camera')
        self.disp = intera_interface.HeadDisplay()
        self.gripper = intera_interface.Gripper()

        # # sloppy way to get paths to display images- don't use but may be useful in other nodes
        # self.img_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        # self.img_dir = os.path.join(self.img_dir, 'images', 'display')
        # self.disp.display_image(os.path.join(self.img_dir, 'blank_screen.png'))

        self.io.set_signal_value('set_exposure', 20.0)

    def grab_bag_callback(self, srv_data):
        """
        Service request callback. Grabs bag from player. The first time this is called, Sawyer will
        accept bag of either color. On subsequent calls will only accept first color.
        :param data: na
        :return: na
        """

        # open gripper, switch to correct feed, display instructions
        self.gripper_srv(0)
        switch_camera('arm')
        put_text('Bag please.', bg_color=self.bg_color)
        bag_present = False

        # Get bag and select team
        if not self.init:
            while self.blue_count < self.present_thresh and self.red_count < self.present_thresh:
                pass

            if self.blue_count >= self.present_thresh:
                self.team = 'blue'
                put_text('Go Blue!', (255, 0, 0))
                rospy.sleep(2)
                put_text('Ready for bag.', (255, 0, 0))
                self.bg_color = (255, 0, 0)
            else:
                self.team = 'red'
                put_text('Red Team!', (0, 0, 255))
                rospy.sleep(2)
                put_text('Ready for bag.', (0, 0, 255))
                self.bg_color = (0, 0, 255)
            self.init = True
            bag_present = True

        # Get bag of correct color
        while not bag_present:
            while self.blue_count < self.present_thresh and self.red_count < self.present_thresh:
                pass
            if self.blue_count >= self.present_thresh:
                if self.team == 'blue':
                    put_text('Ready for bag.', bg_color=self.bg_color)
                    bag_present = True
                else:
                    put_text('Wrong team! Try again.', bg_color=(255,0,0), text_color=(0,0,255), scale=2.5)
            else:
                if self.team == 'red':
                    put_text('Ready for bag.', bg_color=self.bg_color)
                    bag_present = True
                else:
                    put_text('Wrong team! Try again.', bg_color=(0, 0, 255), text_color=(255, 0, 0), scale=2.5)

        # open gripper, wait, close gripper
        self.gripper_srv(1)
        rospy.sleep(5)
        self.gripper_srv(0)

        # check if bag in gripper
        has_bag = False
        rospy.sleep(1)
        if self.gripper.get_force() > 2:
            has_bag = True
        while not has_bag:
            self.gripper_srv(1)
            put_text('Insert bag...', bg_color=self.bg_color)
            rospy.sleep(5)
            self.gripper_srv(0)
            rospy.sleep(1)
            if self.gripper.get_force() > 2:
                has_bag = True

        switch_camera('head')

        put_text('Stand clear.', bg_color=self.bg_color)
        rospy.sleep(5)

        return EmptyResponse()

    def get_team_callback(self, data):
        """
        return Sawyer's team (red, blue)
        """
        return TriggerResponse(success=True, message=str(self.team))

    def find_object_callback(self, data):
        """
        Processes beanbag detection.
        :param data:
        :return:
        """

        # Check if object present
        if data.data:
            obj = data.data[0]
        else:
            obj = 0

        # classify object, 1-4 are red 5-8 are blue
        if obj:
            if obj < 5:
                self.red_count += 1
            else:
                self.blue_count += 1
        else:
            self.red_count = 0
            self.blue_count = 0


def main():
    """ The main() function. """
    rospy.init_node('grab_bag_server')
    myGrabBagServer = GrabBagServer()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass


