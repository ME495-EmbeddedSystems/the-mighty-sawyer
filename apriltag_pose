#!/usr/bin/env python

import rospy
from apriltag_ros.msg import AprilTagDetectionArray
from the_mighty_sawyer.srv import TagPose
import numpy as np
#from std_srvs.srv import Empty, EmptyResponse

class Tag_Pose(object):
    def __init__(self):
        self.sub = rospy.Subscriber('tag_detections', AprilTagDetectionArray, self.sub_callback)
        rospy.Service('locate_board', TagPose, self.locate_board_callback)
        rospy.Service('locate_recent_bag',TagPose,self.locate_recent_bag_callback)
        self.bag_id = 0
        self.array = np.zeros((9))

    def locate_board_callback(self,e):   
        try:       
            if self.tag_vals.detections[0].id == (0,):
    
                self.pos_x0 = self.tag_vals.detections[0].pose.pose.pose.position.x
                self.pos_y0 = self.tag_vals.detections[0].pose.pose.pose.position.y
                self.pos_z0 = self.tag_vals.detections[0].pose.pose.pose.position.z
                self.tag_id0 = self.tag_vals.detections[0].id
                self.position = self.tag_vals.detections[0].pose.pose.pose
                # printing first tags pose
                print "tag: ",
                print self.tag_id0
                print 'x position: ',
                print self.pos_x0,
                print "   y position: ",
                print self.pos_y0,        
                print "   z position: ",
                print self.pos_z0        
                return self.position
            elif self.tag_vals.detections[0].id != (0,):
                return self.position

        except IndexError:
            # printing first tags pose
            print "tag: ",
            print self.tag_id0            
            print 'x position: ',
            print self.pos_x0,
            print "   y position: ",
            print self.pos_y0,        
            print "   z position: ",
            print self.pos_z0
            return self.position              
        
    def locate_recent_bag_callback(self,b):
        try:
            for x in range(9):
                print x
                self.bag_id = self.tag_vals.detections[x].id
                if self.bag_id != (0,):
                    self.bag = self.tag_vals.detections[x].pose.pose.pose
            print self.bag_id
            return self.bag
        except IndexError:
            if self.bag_id != (0,):
                self.bag = self.tag_vals.detections[x-1].pose.pose.pose
                print self.bag_id
                print x
                return self.bag
            else:
                print x
                return []

    def sub_callback(self,pos):

        self.tag_vals = pos


def main():
    rospy.init_node('apriltag_pose')
    tag_pose = Tag_Pose()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
